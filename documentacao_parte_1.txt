# üìÑ Documenta√ß√£o: Processamento de Dados de Exames M√©dicos (Pr√©-API)

## 1. Objetivo
O objetivo deste processo √© calcular o tempo de atraso nos exames m√©dicos dos usu√°rios e classificar se est√£o "em dia" ou "atrasados", de acordo com par√¢metros de sa√∫de predefinidos.  
Esses dados ser√£o posteriormente utilizados pela API de Exames para consultas.

---

## 2. Fonte de Dados
- **Arquivo:** `BD_IA.xlsx`
- **Formato:** Excel
- **Principais Colunas:**
  - ID do usu√°rio
  - Data do √∫ltimo exame para:
    - GLICEMIA JEJUM
    - HEMOGLOBINA GLICADA
    - CREATININA URINA

---

## 3. Tratamento Realizado

### 3.1 Leitura do Arquivo
- Foi feita a leitura do arquivo `.xlsx` usando `pandas.read_excel`.
- Corrigido o problema de "invalid escape sequence" utilizando barra invertida dupla `\\` ou string `r'...'` no caminho do arquivo.

### 3.2 Convers√£o de Datas
- As colunas de datas foram convertidas para o formato `datetime`, utilizando:
  ```python
  pd.to_datetime(coluna, errors='coerce')
  ```
- `errors='coerce'` for√ßa datas inv√°lidas a se tornarem `NaT` (Not a Time), para evitar erros.

### 3.3 C√°lculo da Diferen√ßa de Dias
- Para cada exame, foi calculado o n√∫mero de dias entre a **data atual** (`datetime.today()`) e a **data do √∫ltimo exame**.
- Colunas criadas para armazenar o resultado:
  - `SITUACAO_GLICEMIA`
  - `SITUACAO_GLICADA`
  - `SITUACAO_CREATININA`

Exemplo de c√≥digo usado:
```python
BD_IA['SITUACAO_GLICEMIA'] = (datetime.today() - BD_IA['GLICEMIA JEJUM']).dt.days
```

---

## 4. Par√¢metros de Atraso Utilizados

| Exame                    | Limite para estar em dia  |
|--------------------------|---------------------------|
| Glicemia Jejum           | 30 dias                   |
| Hemoglobina Glicada      | 180 dias                  |
| Creatinina Urina         | 365 dias                  |

---

## 5. Classifica√ß√£o dos Usu√°rios
- Foram criadas colunas adicionais para indicar se o exame est√° "em dia" ou "atrasado":
  - `STATUS_GLICEMIA`
  - `STATUS_GLICADA`
  - `STATUS_CREATININA`

L√≥gica aplicada e par√¢metros:

```python
BD_IA['STATUS_GLICEMIA'] = BD_IA['SITUACAO_GLICEMIA'].apply(lambda x: 'atrasado' if x > 30 else 'em dia')
BD_IA['STATUS_GLICADA'] = BD_IA['SITUACAO_GLICADA'].apply(lambda x: 'atrasado' if x > 180 else 'em dia')
BD_IA['STATUS_CREATININA'] = BD_IA['SITUACAO_CREATININA'].apply(lambda x: 'atrasado' if x > 365 else 'em dia')
```

---

## 6. Resultado Final
O DataFrame resultante possui:
- Identifica√ß√£o dos usu√°rios.
- Dias de atraso para cada exame.
- Status (atrasado/em dia) para cada exame.

---

## 7. Observa√ß√µes T√©cnicas
- Utilizado o pacote `pandas` para manipula√ß√£o de dados.
- Datas tratadas para evitar erros de formata√ß√£o.


## 8. API
- Utiliza√ß√£o do pacote FastAPI para cria√ß√£o da API.
- Utiliza√ß√£o do pacote Uvicorn para rodar a API.



